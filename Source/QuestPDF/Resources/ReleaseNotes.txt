Version 2024.3.0

The primary theme of this release is the removal of the SkiaSharp dependency and the introduction of a custom native layer built on top of Skia M124.


This change was necessary to provide much higher flexibility and enable several new long-awaited features:
- Font subsetting - this feature includes only necessary font glyphs in the output document, greatly reducing the file size, especially when using glyph-rich fonts supporting multiple languages,
- Improved text-related capabilities, including but not limited to text justification, bi-directionality, enhanced line breaking algorithms, more styles for text decoration, word spacing, and more,
- Introduced additional document compression to further reduce file size,
- Integrated native SVG support,
- In future releases: enhanced accessibility through support for PDF tags.


Other changes:
- Removed the SkiaSharp dependency, thereby making QuestPDF a standalone library,
- Updated the Lato font to the latest version (2.015),
- Included licenses of the third-party dependencies in the NuGet package,
- Included a list of Contributors in the NuGet package to acknowledge the valuable input from our Community in improving QuestPDF.


Unfortunately, this release also introduces breaking changes:
- Removed support for injecting SkiaSharp content directly into the document. It is still possible to integrate SkiaSharp through vector and raster graphics; please consult the documentation for more details,
- Removed support for platforms: Android, iOS, UWP, WASM, and Linux-Alpine. We are currently investigating reintroducing support for WASM and Linux-Alpine in future releases.

We would like to thank the SkiaSharp project, its maintainers, and contributors, for creating a fantastic graphics library. It was a fantastic foundation for QuestPDF for over 3 years.


Version 2024.3.1
- Enhanced discoverability of text alignment options (AlignLeft, AlignCenter, AlignRight, AlignStart, AlignEnd and Justify) when using the shorthand Text method (common use case).
- To enhance compatibility with existing codebases, we've removed the breaking change associated with the deprecation of the TextStyle.Fallback method. Although this method remains obsolete, we've reintroduced it with a compatibility layer to prevent disruptions.
- Enhanced compatibility with dotnet standard projects.
- Fix: on the Windows platform, the "Could not find an appropriate font fallback for the following glyphs: $U-000D" exception is thrown when the "QuestPDF.Settings.CheckIfAllTextGlyphsAreAvailable" is set true, and the "TextDescriptor.Line" method is used (that inserts the '\r' character).
- Fix: resolved an issue where the positioning of hyperlinks was incorrect when text contained injected block items.


Version 2024.3.2
- Introduced support for the linux-musl-x64 platform.
- Adjusted how the Lato font is embedded in the NuGet package to prevent issues with the files not being provided on the platform-specific runtimes.
- Improved compatibility with texts that contain the carriage return character '\r'.
- Enhanced exception messages when the FontManager.RegisterFont method fails due to an invalid font file.
- Enhanced the Canvas element deprecation message by adding a link to the documentation.
- Fixed: the SVG image is not always scaled properly, especially when uses relative units internally (percentage, cm, "mm", etc.).
- Fixed a sporadic `AccessViolationException` that occurred when UseEnvironmentFonts was set to `false` and documents were generated in parallel.
- Fixed an issue where dynamic SVG images were not utilizing the available space correctly. This resulted in images with a zero size.
